---
# tasks file for dfir-station

# Wireshark
- name: Run apt-get update
  apt:
    update_cache: yes
  become: yes

- name: Allow non-root users to capture traffic
  debconf:
    name='wireshark-common'
    question='wireshark-common/install-setuid'
    vtype='boolean'
    value='true'
  become: yes

- name: Install CLI package
  apt:
    name: "{{ item }}"
    state: present
  with_items: "{{ wireshark_cli_package }}"
  when: wireshark_cli
  become: yes

- name: Install GUI package
  apt:
    name: "{{ item }}"
    state: present
  with_items: "{{ wireshark_gui_package }}"
  when: wireshark_gui
  become: yes

- name: Add current user to Wireshark group
  user:
    name: "{{ wireshark_user }}"
    append: yes
    groups: wireshark
  become: yes

# Prepare System
- name: Install CA Certificates (Debian-based systems)
  ansible.builtin.apt:
    name:
      - ca-certificates
    state: present
  when: ansible_os_family == "Debian"

- name: Install Required Packages
  ansible.builtin.apt:
    name:
      - wget
    state: present

- name: Upgrade Kali Linux
  ansible.builtin.apt:
    upgrade: dist
    update_cache: yes

- name: Check if Reboot Required
  ansible.builtin.stat:
    path: /var/run/reboot-required
    get_checksum: no
  register: reboot_required_file

- name: Reboot Server if Required
  ansible.builtin.reboot:
  when: reboot_required_file.stat.exists == true

# ----------- Fleet -----------
- name: Download Fleet File Using wget
  ansible.builtin.command: wget {{ fleet_download_link }} -O {{ fleet_output_file }}

- name: Create Executable File For Fleet
  ansible.builtin.file:
    path: "{{ fleet_install_path }}"
    owner: "root"
    group: "root"
    mode: 0755
    state: touch

- name: Extract Fleet Binary
  command: tar -xf  {{ fleet_output_file }}

- name: Copy Fleet Binary to /usr/local/bin
  command: cp {{fleet_output_file }}/fleet /usr/local/bin/
  args:
    creates: /usr/local/bin/fleet

- name: Create Admin user
  ansible.builtin.command:
    argv:
      - "sudo"
      - "{{ fleet_output_file }}"
      - "--config"
      - "/etc/{{ fleet_output_file }}.config.yaml"
      - "user"
      - "add"
      - "{{ fleet_admin_username }}"
      - "{{ fleet_admin_password }}"
      - "--role"
      - "administrator"
  args:
    chdir: "/home/{{ ansible_user }}"

- name: Create fleet systemd service file
  copy:
    dest: /etc/systemd/system/fleet.service
    content: |
      [Unit]
      Description=Fleet
      After=network.target

      [Service]
      User=fleet
      Group=fleet
      LimitNOFILE=8192
      ExecStart=/usr/local/bin/fleet serve \
        --mysql_address=127.0.0.1:3306 \
        --mysql_database=fleet \
        --mysql_username=root \
        --mysql_password=toor \
        --redis_address=127.0.0.1:6379 \
        --server_cert=/tmp/server.cert \
        --server_key=/tmp/server.key \
        --logging_json

      [Install]
      WantedBy=multi-user.target
    mode: '0644'

- name: Move Fleet Service to systemd Directory
  command: mv /usr/local/bin/fleet /etc/systemd/system/fleet.service

- name: Unmask Fleet Service
  command: systemctl unmask fleet.service

- name: Start Fleet Service
  command: systemctl start fleet.service

- name: Check Status of Fleet Service
  command: systemctl status fleet.service

- name: Follow Fleet Service Logs
  command: journalctl -u fleet.service -f

- name: Reload systemd to Recognize New Service
  ansible.builtin.command: systemctl daemon-reload

- name: Enable and Start Fleet Service on Boot
  systemd:
    name: fleet
    enabled: yes
    state: started